// +build !ignore_autogenerated

// Code generated by deepcopy-gen. DO NOT EDIT.

package v1beta1

import (
	v1 "github.com/openshift/api/config/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConnectionConfig) DeepCopyInto(out *ConnectionConfig) {
	*out = *in
	if in.CA != nil {
		in, out := &in.CA, &out.CA
		*out = new(v1.ConfigMapNameReference)
		**out = **in
	}
	if in.TLSClientCert != nil {
		in, out := &in.TLSClientCert, &out.TLSClientCert
		*out = new(v1.SecretNameReference)
		**out = **in
	}
	if in.TLSClientKey != nil {
		in, out := &in.TLSClientKey, &out.TLSClientKey
		*out = new(v1.SecretNameReference)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConnectionConfig.
func (in *ConnectionConfig) DeepCopy() *ConnectionConfig {
	if in == nil {
		return nil
	}
	out := new(ConnectionConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HelmChartRepository) DeepCopyInto(out *HelmChartRepository) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HelmChartRepository.
func (in *HelmChartRepository) DeepCopy() *HelmChartRepository {
	if in == nil {
		return nil
	}
	out := new(HelmChartRepository)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *HelmChartRepository) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HelmChartRepositoryList) DeepCopyInto(out *HelmChartRepositoryList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]HelmChartRepository, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HelmChartRepositoryList.
func (in *HelmChartRepositoryList) DeepCopy() *HelmChartRepositoryList {
	if in == nil {
		return nil
	}
	out := new(HelmChartRepositoryList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *HelmChartRepositoryList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HelmChartRepositorySpec) DeepCopyInto(out *HelmChartRepositorySpec) {
	*out = *in
	in.ConnectionConfig.DeepCopyInto(&out.ConnectionConfig)
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HelmChartRepositorySpec.
func (in *HelmChartRepositorySpec) DeepCopy() *HelmChartRepositorySpec {
	if in == nil {
		return nil
	}
	out := new(HelmChartRepositorySpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HelmChartRepositoryStatus) DeepCopyInto(out *HelmChartRepositoryStatus) {
	*out = *in
	if in.Conditions != nil {
		in, out := &in.Conditions, &out.Conditions
		*out = make([]metav1.Condition, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HelmChartRepositoryStatus.
func (in *HelmChartRepositoryStatus) DeepCopy() *HelmChartRepositoryStatus {
	if in == nil {
		return nil
	}
	out := new(HelmChartRepositoryStatus)
	in.DeepCopyInto(out)
	return out
}
